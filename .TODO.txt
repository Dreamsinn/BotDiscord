- Un cliente distinto por servidor (intancia / base de datos?)

    en handler
    private playListIntanceServers = [];


    if (route.category === 'music') {
                    if (!this.playListIntanceServers.find((data: any) => data.id === event.guildId)) {
                        this.playListIntanceServers.push({id: event.guildId, playList: new PlayListHandler(bot)})
                    }
                    const data = this.playListIntanceServers.find((data: any) => data.id === event.guildId)
                    return route.command.call(event);
                }

- delet emojis:  private async deleteUserReaction(displayMessage: Message, user: User) {
                        const userReactions = displayMessage.reactions.cache.filter((reaction) =>
                            reaction.users.cache.has(user.id),
                        );

                        userReactions.map(
                            async (reaction) =>
                                await reaction.users.remove(user.id).catch(() => {
                                    console.error('Failed to remove reactions.');
                                }),
                        );

                        return;
                    }

- recion a emojis: const filter = (reaction: MessageReaction, user: User) => {
                           //     const userCondition = !user.bot;
                           //     const emojiCondition = emojiList.includes(reaction.emoji.name);
                           //
                           //     return userCondition && emojiCondition;
                           // };

                           // const collector = displayMessage.createReactionCollector({ filter, time: 36000000 });
                           // collector.on('collect', (collected, user) => {
                           //     this.deleteUserReaction(displayMessage, user);
                           //     // si x borra el msenaje
                           //     if (collected.emoji.name === discordEmojis.x) {
                           //         return collector.stop();
                           //     }
                           //     // si readme, y no esta el readme activo
                           //     if (collected.emoji.name === discordEmojis.readme && !this.showingReadme) {
                           //         return this.createReadmeEmbed(event);
                           //     }
                           //
                           //     return this.reactionHandler(collected);
                           // });
                           //
                           // collector.on('end', async () => {
                           //     this.isDisplayActive = false;
                           //     this.playListHandler.deactivateDisplay();
                           //
                           //     displayMessage.delete().catch(() => console.log('Display has been deleted.'));
                           //     await event.channel.send('Display ha cesado su funcionamiento.');
                           //     return;
                           // });
- Rama master quitar eslint y mirar si hay algun prosproducion de ts

- Regex para las busqueda de un mensaje, para no tener que hacer opcion minuscula y mayusucla, un util

- Test

- Ha tocado una cancion hasta el final, ha acabado, y al poner la siguiente a sonado la primera, y no se podia pasar

- Si getSongInfo no tiene duracion, la cancion no llega tocarse

- poner musica no hizo entrar el bot

- loopCommand, que no necesite off o on. Que envie un mensaje con el nuevo estado de loop ------- pause y unpause mismo comando

- Remove, si no hay canciones que lo indique

- Clear borrar toda la playlist incluso la que suena